import streamlit as st
import openai # OpenRouter iÃ§in OpenAI kÃ¼tÃ¼phanesini kullanÄ±yoruz
# import os # ArtÄ±k os.environ'a ihtiyacÄ±mÄ±z kalmadÄ±, st.secrets her ÅŸeyi hallediyor

# --- Streamlit Secrets KullanÄ±mÄ± ---
# 1. Streamlit Cloud'a daÄŸÄ±tÄ±yorsanÄ±z:
# UygulamanÄ±zÄ±n Ayarlar (Settings) > Secrets bÃ¶lÃ¼mÃ¼ne gidin ve aÅŸaÄŸÄ±daki satÄ±rlarÄ± ekleyin:
# OPENROUTER_API_KEY = "sk-or-v1-SENIN-OPENROUTER-API-ANAHTARIN"
# MODEL_NAME = "mistralai/mistral-7b-instruct:free" # (Ä°steÄŸe baÄŸlÄ±, varsayÄ±lanÄ± kullanabilirsiniz)

# 2. Yerel geliÅŸtirme yapÄ±yorsanÄ±z:
# Proje ana dizininizde .streamlit/secrets.toml dosyasÄ± oluÅŸturun ve iÃ§ine:
# OPENROUTER_API_KEY = "sk-or-v1-SENIN-OPENROUTER-API-ANAHTARIN"
# MODEL_NAME = "mistralai/mistral-7b-instruct:free" # (Ä°steÄŸe baÄŸlÄ±)
# satÄ±rlarÄ±nÄ± ekleyin.
# BU DOSYAYI .gitignore'A EKLEMEYÄ° UNUTMAYIN!

# Streamlit Secrets'tan API anahtarÄ±nÄ± ve model adÄ±nÄ± okuma
OPENROUTER_API_KEY = st.secrets.get("OPENROUTER_API_KEY")
# Model adÄ± iÃ§in bir varsayÄ±lan deÄŸer belirleyelim, eÄŸer Secrets'ta tanÄ±mlanmamÄ±ÅŸsa bu kullanÄ±lÄ±r.
MODEL_NAME = st.secrets.get("MODEL_NAME", "mistralai/mistral-7b-instruct:free")

# API anahtarÄ± olmadan uygulama Ã§alÄ±ÅŸamaz
if not OPENROUTER_API_KEY:
    st.error("OpenRouter API anahtarÄ± bulunamadÄ±! LÃ¼tfen Streamlit Secrets bÃ¶lÃ¼mÃ¼ne 'OPENROUTER_API_KEY' olarak ekleyin.")
    st.caption("Yerelde Ã§alÄ±ÅŸÄ±yorsanÄ±z, projenizin `.streamlit/secrets.toml` dosyasÄ±na eklediÄŸinizden emin olun.")
    st.stop() # UygulamayÄ± durdur

# OpenAI istemcisini OpenRouter iÃ§in yapÄ±landÄ±rma
client = openai.OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# --- Streamlit ArayÃ¼zÃ¼ ---
st.set_page_config(page_title="OpenRouter Chatbot", page_icon="ğŸ¤–")
st.title("ğŸ¤– OpenRouter Destekli Chatbot")
st.caption(f"KullanÄ±lan Model: {MODEL_NAME}")

# Sohbet geÃ§miÅŸini session state'de saklama
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "Sen yardÄ±msever bir asistansÄ±n."} # Sistem mesajÄ±
    ]

# Sohbet geÃ§miÅŸini gÃ¶sterme
for message in st.session_state.messages:
    if message["role"] != "system": # Sistem mesajlarÄ±nÄ± arayÃ¼zde gÃ¶stermeyelim
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

# KullanÄ±cÄ±dan girdi alma
if prompt := st.chat_input("MesajÄ±nÄ±zÄ± yazÄ±n..."):
    # KullanÄ±cÄ±nÄ±n mesajÄ±nÄ± geÃ§miÅŸe ekle
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Bot'un yanÄ±tÄ±nÄ± alma
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        full_response = ""
        try:
            messages_to_send = [
                {"role": m["role"], "content": m["content"]}
                for m in st.session_state.messages
            ]

            stream = client.chat.completions.create(
                model=MODEL_NAME,
                messages=messages_to_send,
                stream=True,
                # Ä°steÄŸe baÄŸlÄ±: OpenRouter'a Ã¶zel baÅŸlÄ±klar
                # Streamlit Secrets'tan da alabilirsiniz:
                # http_referer = st.secrets.get("YOUR_SITE_URL")
                # x_title = st.secrets.get("YOUR_APP_NAME")
                # extra_headers={
                # "HTTP-Referer": http_referer if http_referer else "http://localhost:8501",
                # "X-Title": x_title if x_title else "Streamlit OpenRouter Chatbot"
                # }
            )
            for chunk in stream:
                if chunk.choices[0].delta.content is not None:
                    full_response += chunk.choices[0].delta.content
                    message_placeholder.markdown(full_response + "â–Œ")
            message_placeholder.markdown(full_response)
        except openai.APIError as e:
            st.error(f"OpenRouter API HatasÄ±: {e}")
            st.error(f"Detay: {e.body}") # Hata hakkÄ±nda daha fazla bilgi iÃ§in
            full_response = "ÃœzgÃ¼nÃ¼m, API ile iletiÅŸimde bir sorun oluÅŸtu."
        except Exception as e:
            st.error(f"Beklenmedik bir hata oluÅŸtu: {e}")
            full_response = "ÃœzgÃ¼nÃ¼m, bir hata oluÅŸtu."

    # Bot'un yanÄ±tÄ±nÄ± geÃ§miÅŸe ekle
    st.session_state.messages.append({"role": "assistant", "content": full_response})

# Sohbeti temizleme butonu
if st.sidebar.button("Sohbeti Temizle"):
    st.session_state.messages = [
        {"role": "system", "content": "Sen yardÄ±msever bir asistansÄ±n."}
    ]
    st.rerun()

st.sidebar.markdown("---")
st.sidebar.markdown("OpenRouter.ai ve Streamlit ile gÃ¼Ã§lendirilmiÅŸtir.")
